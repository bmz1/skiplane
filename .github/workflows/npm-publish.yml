name: npm-publish

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.
  workflow_dispatch:  # Allow manual trigger

jobs:
  pre-publish-checks:
    runs-on: ubuntu-latest
    outputs:
      should-publish: ${{ steps.checks.outputs.should-publish }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run formatting check
        run: npm run fmt

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm run test

      - name: Check if dist folder exists
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ dist folder not found after build"
            exit 1
          fi
          echo "✅ dist folder exists"

      - name: Check if main export file exists
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "❌ dist/index.js not found"
            exit 1
          fi
          echo "✅ Main export file exists"

      - name: Check if type definitions exist
        run: |
          if [ ! -f "dist/index.d.ts" ]; then
            echo "❌ dist/index.d.ts not found"
            exit 1
          fi
          echo "✅ Type definitions exist"

      - name: Validate package.json fields
        run: |
          echo "Checking package.json required fields..."
          
          # Check if name exists and is not empty
          NAME=$(node -p "require('./package.json').name || ''")
          if [ -z "$NAME" ]; then
            echo "❌ package.json missing 'name' field"
            exit 1
          fi
          echo "✅ Package name: $NAME"

          # Check if version exists and is valid semver
          VERSION=$(node -p "require('./package.json').version || ''")
          if [ -z "$VERSION" ]; then
            echo "❌ package.json missing 'version' field"
            exit 1
          fi
          echo "✅ Package version: $VERSION"

          # Check if description exists
          DESCRIPTION=$(node -p "require('./package.json').description || ''")
          if [ -z "$DESCRIPTION" ]; then
            echo "❌ package.json missing 'description' field"
            exit 1
          fi
          echo "✅ Package description: $DESCRIPTION"

          # Check if main export exists
          MAIN=$(node -p "require('./package.json').main || require('./package.json').exports || ''")
          if [ -z "$MAIN" ]; then
            echo "❌ package.json missing 'main' or 'exports' field"
            exit 1
          fi
          echo "✅ Main export: $MAIN"

          # Check if license exists
          LICENSE=$(node -p "require('./package.json').license || ''")
          if [ -z "$LICENSE" ]; then
            echo "❌ package.json missing 'license' field"
            exit 1
          fi
          echo "✅ License: $LICENSE"

      - name: Check if version tag matches package.json
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Tag version ($TAG_VERSION) doesn't match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "✅ Tag version matches package.json version: $PACKAGE_VERSION"

      - name: Dry run npm publish
        run: npm publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Set publish flag
        id: checks
        run: echo "should-publish=true" >> $GITHUB_OUTPUT

  publish:
    needs: pre-publish-checks
    runs-on: ubuntu-latest
    if: needs.pre-publish-checks.outputs.should-publish == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
            
            Published to npm: https://www.npmjs.com/package/skiplane
          draft: false
          prerelease: false